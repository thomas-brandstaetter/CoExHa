-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.10 from src/defs/parser.y
-----------------------------------------------------------------------------


rule 9 is unused
rule 10 is unused

terminal "=<" is unused
terminal ":" is unused
terminal "#" is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_myce -> Program                             (0)
	Program -> Program Funcdef ";"                     (1)
	Program ->                                         (2)
	Funcdef -> id "(" Params ")" Stmts end             (3)
	Params -> id                                       (4)
	Params -> id "," Params                            (5)
	Params ->                                          (6)
	Stmts -> Stmt ";" Stmts                            (7)
	Stmts ->                                           (8)
	Labeldef -> id ":"                                 (9)
	Labeldef ->                                        (10)
	Stmt -> return                                     (11)
	Stmt -> return Term                                (12)
	Stmt -> goto id                                    (13)
	Stmt -> if Expr then Stmts end                     (14)
	Stmt -> var id "=" Expr                            (15)
	Stmt -> Term                                       (16)
	Stmt -> LExpr "=" Expr                             (17)
	Stmt ->                                            (18)
	Expr -> Unary                                      (19)
	Expr -> Term "+" Term                              (20)
	Expr -> Term "*" Term                              (21)
	Expr -> Term and Term                              (22)
	LExpr -> id                                        (23)
	Term -> "(" Expr ")"                               (24)
	Term -> id                                         (25)
	Term -> id "(" Params ")"                          (26)
	Term -> num                                        (27)
	Unary -> not Unary                                 (28)
	Unary -> "-" Unary                                 (29)
	Unary -> Term                                      (30)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	end            { TEnd _ }
	return         { TReturn _ }
	goto           { TGoto _ }
	if             { TIf _ }
	then           { TThen _ }
	var            { TVar _ }
	not            { TNot _ }
	and            { TAnd _ }
	"=<"           { TLessOrEqual _ }
	";"            { TSemicolon _ }
	"("            { TLeftParen _ }
	")"            { TRightParen _ }
	","            { TComma _ }
	":"            { TColon _ }
	"+"            { TPlus _ }
	"-"            { TMinus _ }
	"="            { TEqual _ }
	"*"            { TStar _ }
	"#"            { TNumSign _ }
	id             { TId _ $$ }
	num            { TNum _ $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_myce     rule  0
	Program         rules 1, 2
	Funcdef         rule  3
	Params          rules 4, 5, 6
	Stmts           rules 7, 8
	Labeldef        rules 9, 10
	Stmt            rules 11, 12, 13, 14, 15, 16, 17, 18
	Expr            rules 19, 20, 21, 22
	LExpr           rule  23
	Term            rules 24, 25, 26, 27
	Unary           rules 28, 29, 30

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	id             reduce using rule 2
	%eof           reduce using rule 2

	Program        goto state 3

State 1



	Program        goto state 2

State 2

	Program -> Program . Funcdef ";"                    (rule 1)

	id             shift, and enter state 5

	Funcdef        goto state 4

State 3

	%start_myce -> Program .                            (rule 0)
	Program -> Program . Funcdef ";"                    (rule 1)

	id             shift, and enter state 5
	%eof           accept

	Funcdef        goto state 4

State 4

	Program -> Program Funcdef . ";"                    (rule 1)

	";"            shift, and enter state 7


State 5

	Funcdef -> id . "(" Params ")" Stmts end            (rule 3)

	"("            shift, and enter state 6


State 6

	Funcdef -> id "(" . Params ")" Stmts end            (rule 3)

	")"            reduce using rule 6
	id             shift, and enter state 9

	Params         goto state 8

State 7

	Program -> Program Funcdef ";" .                    (rule 1)

	id             reduce using rule 1
	%eof           reduce using rule 1


State 8

	Funcdef -> id "(" Params . ")" Stmts end            (rule 3)

	")"            shift, and enter state 11


State 9

	Params -> id .                                      (rule 4)
	Params -> id . "," Params                           (rule 5)

	")"            reduce using rule 4
	","            shift, and enter state 10


State 10

	Params -> id "," . Params                           (rule 5)

	")"            reduce using rule 6
	id             shift, and enter state 9

	Params         goto state 23

State 11

	Funcdef -> id "(" Params ")" . Stmts end            (rule 3)

	end            reduce using rule 8
	return         shift, and enter state 16
	goto           shift, and enter state 17
	if             shift, and enter state 18
	var            shift, and enter state 19
	";"            reduce using rule 18
	"("            shift, and enter state 20
	id             shift, and enter state 21
	num            shift, and enter state 22

	Stmts          goto state 12
	Stmt           goto state 13
	LExpr          goto state 14
	Term           goto state 15

State 12

	Funcdef -> id "(" Params ")" Stmts . end            (rule 3)

	end            shift, and enter state 37


State 13

	Stmts -> Stmt . ";" Stmts                           (rule 7)

	";"            shift, and enter state 36


State 14

	Stmt -> LExpr . "=" Expr                            (rule 17)

	"="            shift, and enter state 35


State 15

	Stmt -> Term .                                      (rule 16)

	";"            reduce using rule 16


State 16

	Stmt -> return .                                    (rule 11)
	Stmt -> return . Term                               (rule 12)

	";"            reduce using rule 11
	"("            shift, and enter state 20
	id             shift, and enter state 30
	num            shift, and enter state 22

	Term           goto state 34

State 17

	Stmt -> goto . id                                   (rule 13)

	id             shift, and enter state 33


State 18

	Stmt -> if . Expr then Stmts end                    (rule 14)

	not            shift, and enter state 28
	"("            shift, and enter state 20
	"-"            shift, and enter state 29
	id             shift, and enter state 30
	num            shift, and enter state 22

	Expr           goto state 32
	Term           goto state 26
	Unary          goto state 27

State 19

	Stmt -> var . id "=" Expr                           (rule 15)

	id             shift, and enter state 31


State 20

	Term -> "(" . Expr ")"                              (rule 24)

	not            shift, and enter state 28
	"("            shift, and enter state 20
	"-"            shift, and enter state 29
	id             shift, and enter state 30
	num            shift, and enter state 22

	Expr           goto state 25
	Term           goto state 26
	Unary          goto state 27

State 21

	LExpr -> id .                                       (rule 23)
	Term -> id .                                        (rule 25)
	Term -> id . "(" Params ")"                         (rule 26)

	";"            reduce using rule 25
	"("            shift, and enter state 24
	"="            reduce using rule 23


State 22

	Term -> num .                                       (rule 27)

	then           reduce using rule 27
	and            reduce using rule 27
	";"            reduce using rule 27
	")"            reduce using rule 27
	"+"            reduce using rule 27
	"*"            reduce using rule 27


State 23

	Params -> id "," Params .                           (rule 5)

	")"            reduce using rule 5


State 24

	Term -> id "(" . Params ")"                         (rule 26)

	")"            reduce using rule 6
	id             shift, and enter state 9

	Params         goto state 49

State 25

	Term -> "(" Expr . ")"                              (rule 24)

	")"            shift, and enter state 48


State 26

	Expr -> Term . "+" Term                             (rule 20)
	Expr -> Term . "*" Term                             (rule 21)
	Expr -> Term . and Term                             (rule 22)
	Unary -> Term .                                     (rule 30)

	then           reduce using rule 30
	and            shift, and enter state 45
	";"            reduce using rule 30
	")"            reduce using rule 30
	"+"            shift, and enter state 46
	"*"            shift, and enter state 47


State 27

	Expr -> Unary .                                     (rule 19)

	then           reduce using rule 19
	";"            reduce using rule 19
	")"            reduce using rule 19


State 28

	Unary -> not . Unary                                (rule 28)

	not            shift, and enter state 28
	"("            shift, and enter state 20
	"-"            shift, and enter state 29
	id             shift, and enter state 30
	num            shift, and enter state 22

	Term           goto state 42
	Unary          goto state 44

State 29

	Unary -> "-" . Unary                                (rule 29)

	not            shift, and enter state 28
	"("            shift, and enter state 20
	"-"            shift, and enter state 29
	id             shift, and enter state 30
	num            shift, and enter state 22

	Term           goto state 42
	Unary          goto state 43

State 30

	Term -> id .                                        (rule 25)
	Term -> id . "(" Params ")"                         (rule 26)

	then           reduce using rule 25
	and            reduce using rule 25
	";"            reduce using rule 25
	"("            shift, and enter state 24
	")"            reduce using rule 25
	"+"            reduce using rule 25
	"*"            reduce using rule 25


State 31

	Stmt -> var id . "=" Expr                           (rule 15)

	"="            shift, and enter state 41


State 32

	Stmt -> if Expr . then Stmts end                    (rule 14)

	then           shift, and enter state 40


State 33

	Stmt -> goto id .                                   (rule 13)

	";"            reduce using rule 13


State 34

	Stmt -> return Term .                               (rule 12)

	";"            reduce using rule 12


State 35

	Stmt -> LExpr "=" . Expr                            (rule 17)

	not            shift, and enter state 28
	"("            shift, and enter state 20
	"-"            shift, and enter state 29
	id             shift, and enter state 30
	num            shift, and enter state 22

	Expr           goto state 39
	Term           goto state 26
	Unary          goto state 27

State 36

	Stmts -> Stmt ";" . Stmts                           (rule 7)

	end            reduce using rule 8
	return         shift, and enter state 16
	goto           shift, and enter state 17
	if             shift, and enter state 18
	var            shift, and enter state 19
	";"            reduce using rule 18
	"("            shift, and enter state 20
	id             shift, and enter state 21
	num            shift, and enter state 22

	Stmts          goto state 38
	Stmt           goto state 13
	LExpr          goto state 14
	Term           goto state 15

State 37

	Funcdef -> id "(" Params ")" Stmts end .            (rule 3)

	";"            reduce using rule 3


State 38

	Stmts -> Stmt ";" Stmts .                           (rule 7)

	end            reduce using rule 7


State 39

	Stmt -> LExpr "=" Expr .                            (rule 17)

	";"            reduce using rule 17


State 40

	Stmt -> if Expr then . Stmts end                    (rule 14)

	end            reduce using rule 8
	return         shift, and enter state 16
	goto           shift, and enter state 17
	if             shift, and enter state 18
	var            shift, and enter state 19
	";"            reduce using rule 18
	"("            shift, and enter state 20
	id             shift, and enter state 21
	num            shift, and enter state 22

	Stmts          goto state 55
	Stmt           goto state 13
	LExpr          goto state 14
	Term           goto state 15

State 41

	Stmt -> var id "=" . Expr                           (rule 15)

	not            shift, and enter state 28
	"("            shift, and enter state 20
	"-"            shift, and enter state 29
	id             shift, and enter state 30
	num            shift, and enter state 22

	Expr           goto state 54
	Term           goto state 26
	Unary          goto state 27

State 42

	Unary -> Term .                                     (rule 30)

	then           reduce using rule 30
	";"            reduce using rule 30
	")"            reduce using rule 30


State 43

	Unary -> "-" Unary .                                (rule 29)

	then           reduce using rule 29
	";"            reduce using rule 29
	")"            reduce using rule 29


State 44

	Unary -> not Unary .                                (rule 28)

	then           reduce using rule 28
	";"            reduce using rule 28
	")"            reduce using rule 28


State 45

	Expr -> Term and . Term                             (rule 22)

	"("            shift, and enter state 20
	id             shift, and enter state 30
	num            shift, and enter state 22

	Term           goto state 53

State 46

	Expr -> Term "+" . Term                             (rule 20)

	"("            shift, and enter state 20
	id             shift, and enter state 30
	num            shift, and enter state 22

	Term           goto state 52

State 47

	Expr -> Term "*" . Term                             (rule 21)

	"("            shift, and enter state 20
	id             shift, and enter state 30
	num            shift, and enter state 22

	Term           goto state 51

State 48

	Term -> "(" Expr ")" .                              (rule 24)

	then           reduce using rule 24
	and            reduce using rule 24
	";"            reduce using rule 24
	")"            reduce using rule 24
	"+"            reduce using rule 24
	"*"            reduce using rule 24


State 49

	Term -> id "(" Params . ")"                         (rule 26)

	")"            shift, and enter state 50


State 50

	Term -> id "(" Params ")" .                         (rule 26)

	then           reduce using rule 26
	and            reduce using rule 26
	";"            reduce using rule 26
	")"            reduce using rule 26
	"+"            reduce using rule 26
	"*"            reduce using rule 26


State 51

	Expr -> Term "*" Term .                             (rule 21)

	then           reduce using rule 21
	";"            reduce using rule 21
	")"            reduce using rule 21


State 52

	Expr -> Term "+" Term .                             (rule 20)

	then           reduce using rule 20
	";"            reduce using rule 20
	")"            reduce using rule 20


State 53

	Expr -> Term and Term .                             (rule 22)

	then           reduce using rule 22
	";"            reduce using rule 22
	")"            reduce using rule 22


State 54

	Stmt -> var id "=" Expr .                           (rule 15)

	";"            reduce using rule 15


State 55

	Stmt -> if Expr then Stmts . end                    (rule 14)

	end            shift, and enter state 56


State 56

	Stmt -> if Expr then Stmts end .                    (rule 14)

	";"            reduce using rule 14


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 31
Number of terminals: 21
Number of non-terminals: 11
Number of states: 57
